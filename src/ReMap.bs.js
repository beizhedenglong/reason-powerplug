// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Utils$ReasonPowerplug = require("./Utils.bs.js");
var Value$ReasonPowerplug = require("./Value.bs.js");

function Make(M) {
  var MMap = $$Map.Make(M);
  var Value = Value$ReasonPowerplug.Make({});
  var ReMap$Make = function (Props) {
    var initialOpt = Props.initial;
    var onChange = Props.onChange;
    var children = Props.children;
    var initial = initialOpt !== undefined ? Caml_option.valFromOption(initialOpt) : MMap.empty;
    var tmp = {
      initial: initial,
      children: (function (param) {
          var set = param.set;
          var value = param.value;
          return Curry._1(children, {
                      values: value,
                      clear: (function (param) {
                          return Curry._1(set, (function (param) {
                                        return MMap.empty;
                                      }));
                        }),
                      reset: param.reset,
                      set: set,
                      get: (function (key) {
                          return Utils$ReasonPowerplug.tryWith(function (param) {
                                      return Curry._2(MMap.find, key, value);
                                    });
                        }),
                      has: (function (param) {
                          return Utils$ReasonPowerplug.flip(MMap.mem, value, param);
                        }),
                      remove: (function (param) {
                          return Utils$ReasonPowerplug.Infix.$less$pipe$pipe(set, MMap.remove, param);
                        }),
                      add: (function (k, v) {
                          return Curry._1(set, Curry._2(MMap.add, k, v));
                        })
                    });
        })
    };
    if (onChange !== undefined) {
      tmp.onChange = Caml_option.valFromOption(onChange);
    }
    return React.createElement(Value.make, tmp);
  };
  return {
          MMap: MMap,
          empty: MMap.empty,
          is_empty: MMap.is_empty,
          mem: MMap.mem,
          add: MMap.add,
          update: MMap.update,
          singleton: MMap.singleton,
          remove: MMap.remove,
          merge: MMap.merge,
          union: MMap.union,
          compare: MMap.compare,
          equal: MMap.equal,
          iter: MMap.iter,
          fold: MMap.fold,
          for_all: MMap.for_all,
          exists: MMap.exists,
          filter: MMap.filter,
          partition: MMap.partition,
          cardinal: MMap.cardinal,
          bindings: MMap.bindings,
          min_binding: MMap.min_binding,
          min_binding_opt: MMap.min_binding_opt,
          max_binding: MMap.max_binding,
          max_binding_opt: MMap.max_binding_opt,
          choose: MMap.choose,
          choose_opt: MMap.choose_opt,
          split: MMap.split,
          find: MMap.find,
          find_opt: MMap.find_opt,
          find_first: MMap.find_first,
          find_first_opt: MMap.find_first_opt,
          find_last: MMap.find_last,
          find_last_opt: MMap.find_last_opt,
          map: MMap.map,
          mapi: MMap.mapi,
          Value: Value,
          make: ReMap$Make
        };
}

exports.Make = Make;
/* react Not a pure module */
