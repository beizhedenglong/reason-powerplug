// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe = require("reason-react/src/legacy/ReactDOMRe.bs.js");
var Hover$ReasonPowerplug = require("../src/Hover.bs.js");
var Input$ReasonPowerplug = require("../src/Input.bs.js");
var ReSet$ReasonPowerplug = require("../src/ReSet.bs.js");
var Utils$ReasonPowerplug = require("../src/Utils.bs.js");
var Value$ReasonPowerplug = require("../src/Value.bs.js");
var ReList$ReasonPowerplug = require("../src/ReList.bs.js");
var Toggle$ReasonPowerplug = require("../src/Toggle.bs.js");
var Counter$ReasonPowerplug = require("../src/Counter.bs.js");
var Interval$ReasonPowerplug = require("../src/Interval.bs.js");

var $$Number = Value$ReasonPowerplug.Make({});

var StringList = ReList$ReasonPowerplug.Make({});

var StringSet = ReSet$ReasonPowerplug.Make({
      compare: $$String.compare
    });

var Value = Value$ReasonPowerplug.Make({});

function ignore(fn, x, param) {
  return Curry._1(fn, x);
}

ReactDOMRe.renderToElementWithId(React.createElement("div", undefined, React.createElement("h1", undefined, "Input Functor"), React.createElement(Input$ReasonPowerplug.make, {
              children: (function (param) {
                  var value = param.value;
                  console.log("value: ", value);
                  return React.createElement("div", undefined, React.createElement("p", undefined, "open the console to see changes"), React.createElement("input", {
                                  value: value,
                                  onChange: param.onChange
                                }));
                })
            }), React.createElement("h1", undefined, "Value Functor"), React.createElement(Value.make, {
              initial: 1,
              children: (function (param) {
                  var reset = param.reset;
                  var set = param.set;
                  return React.createElement("div", undefined, React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(set, (function (param) {
                                                    return 100;
                                                  }));
                                    })
                                }, "set 1000"), React.createElement(Interval$ReasonPowerplug.make, {
                                  delay: param.value,
                                  children: (function (param) {
                                      var stop = param.stop;
                                      var start = param.start;
                                      return React.createElement("div", undefined, React.createElement("button", {
                                                      onClick: (function (param) {
                                                          return Curry._1(start, undefined);
                                                        })
                                                    }, "start"), React.createElement("button", {
                                                      onClick: (function (param) {
                                                          return Curry._1(stop, undefined);
                                                        })
                                                    }, "stop"), React.createElement("button", {
                                                      onClick: (function (param) {
                                                          return Curry._1(reset, undefined);
                                                        })
                                                    }, "reset"), Date.now().toString());
                                    })
                                }));
                })
            }), React.createElement("h1", undefined, "Hover Functor"), React.createElement(Hover$ReasonPowerplug.make, {
              children: (function (param) {
                  return React.createElement("div", {
                              onMouseEnter: param.onMouseEnter,
                              onMouseLeave: param.onMouseLeave
                            }, " You are " + ((
                                param.hovered ? "hovering" : "not hovering"
                              ) + "this div"));
                })
            }), React.createElement("h1", undefined, "StringSet"), React.createElement(StringSet.make, {
              initial: Curry._1(StringSet.of_list, {
                    hd: "1",
                    tl: {
                      hd: "2",
                      tl: {
                        hd: "3",
                        tl: /* [] */0
                      }
                    }
                  }),
              children: (function (param) {
                  var clear = param.clear;
                  var add = param.add;
                  return React.createElement("div", undefined, React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(add, "4");
                                    })
                                }, "add 4"), React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(clear, undefined);
                                    })
                                }, "clear"), React.createElement("ul", undefined, $$Array.of_list(List.map((function (item) {
                                            return React.createElement("li", {
                                                        key: item
                                                      }, item);
                                          }), Curry._1(StringSet.elements, param.values)))));
                })
            }), React.createElement("h1", undefined, "Number"), React.createElement($$Number.make, {
              initial: 1,
              children: (function (param) {
                  var set = param.set;
                  return React.createElement("div", {
                              onClick: (function (param) {
                                  return Curry._1(set, (function (value) {
                                                return value + 1 | 0;
                                              }));
                                })
                            }, String(param.value));
                })
            }), React.createElement("h1", undefined, "Counter"), React.createElement(Counter$ReasonPowerplug.make, {
              initial: 0,
              onChange: (function (count) {
                  console.log(count);
                  
                }),
              children: (function (param) {
                  var inc = param.inc;
                  return React.createElement("div", undefined, String(param.count), React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(inc, undefined);
                                    })
                                }, "+1"));
                })
            }), React.createElement("h1", undefined, "Toggle"), React.createElement(Toggle$ReasonPowerplug.make, {
              initial: true,
              onChange: (function (param) {
                  return Utils$ReasonPowerplug.$less$pipe$pipe((function (prim) {
                                console.log(prim);
                                
                              }), Pervasives.string_of_bool, param);
                }),
              children: (function (param) {
                  var set = param.set;
                  var toggle = param.toggle;
                  return React.createElement("div", undefined, React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(toggle, undefined);
                                    })
                                }, "toggle"), React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(set, (function (param) {
                                                    return false;
                                                  }));
                                    })
                                }, "set false"), React.createElement("div", undefined, param.on ? "toggle show" : null));
                })
            }), React.createElement("h1", undefined, "StringList"), React.createElement(StringList.make, {
              initial: {
                hd: "d",
                tl: {
                  hd: "c",
                  tl: {
                    hd: "a",
                    tl: {
                      hd: "e",
                      tl: {
                        hd: "b",
                        tl: {
                          hd: "h",
                          tl: {
                            hd: "g",
                            tl: /* [] */0
                          }
                        }
                      }
                    }
                  }
                }
              },
              children: (function (param) {
                  var reset = param.reset;
                  var sort = param.sort;
                  return React.createElement("div", undefined, React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(sort, $$String.compare);
                                    })
                                }, "sort"), React.createElement("button", {
                                  onClick: (function (param) {
                                      return Curry._1(reset, undefined);
                                    })
                                }, "reset"), React.createElement("ul", undefined, $$Array.of_list(List.map((function (s) {
                                            return React.createElement("li", {
                                                        key: s
                                                      }, s);
                                          }), param.list))));
                })
            })), "app");

exports.$$Number = $$Number;
exports.StringList = StringList;
exports.StringSet = StringSet;
exports.Value = Value;
exports.ignore = ignore;
/* Number Not a pure module */
